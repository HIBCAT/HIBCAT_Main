# Generated by Django 3.1.5 on 2021-01-17 01:08

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BwActivityDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dayOfWeek', models.IntegerField(blank=True, null=True)),
                ('day_vol', models.BigIntegerField(blank=True, null=True, verbose_name='Volume by Day')),
            ],
        ),
        migrations.CreateModel(
            name='BwActivityTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hourOfDay', models.TimeField(blank=True, null=True, verbose_name='Time')),
                ('time_vol', models.BigIntegerField(blank=True, null=True, verbose_name='Volume by Time')),
            ],
        ),
        migrations.CreateModel(
            name='BwContentSources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('blogs', models.IntegerField(blank=True, default=0, null=True, verbose_name='Blogs')),
                ('twitter', models.IntegerField(blank=True, default=0, null=True, verbose_name='Twitter')),
                ('reddit', models.IntegerField(blank=True, default=0, null=True, verbose_name='Reddit')),
            ],
        ),
        migrations.CreateModel(
            name='BwEmotions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('anger', models.IntegerField(blank=True, default=0, null=True, verbose_name='Anger')),
                ('fear', models.IntegerField(blank=True, default=0, null=True, verbose_name='Fear')),
                ('disgust', models.IntegerField(blank=True, default=0, null=True, verbose_name='Disgust')),
                ('joy', models.IntegerField(blank=True, default=0, null=True, verbose_name='Fear')),
                ('surprise', models.IntegerField(blank=True, default=0, null=True, verbose_name='Surprise')),
                ('sadness', models.IntegerField(blank=True, default=0, null=True, verbose_name='Sadness')),
            ],
        ),
        migrations.CreateModel(
            name='BwGeography',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('countries', models.TextField(blank=True, null=True)),
                ('geo_vol', models.IntegerField(blank=True, null=True, verbose_name='Geographic Volume')),
            ],
        ),
        migrations.CreateModel(
            name='BwNetSentiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('net_sent_vol', models.FloatField(blank=True, null=True, verbose_name='Net Sentiment Volume')),
            ],
        ),
        migrations.CreateModel(
            name='BwSentiments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('positive', models.IntegerField(blank=True, default=0, null=True)),
                ('neutral', models.IntegerField(blank=True, default=0, null=True)),
                ('negative', models.IntegerField(blank=True, default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BwVolume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('volume', models.IntegerField(blank=True, null=True, verbose_name='Activity Volume')),
            ],
        ),
        migrations.CreateModel(
            name='ClineCenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publication_date', models.DateField(blank=True, null=True)),
                ('article_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='_id')),
                ('aid', models.TextField(blank=True, null=True)),
                ('source_name', models.TextField(blank=True, null=True)),
                ('source_location', models.TextField(blank=True, null=True)),
                ('url', models.TextField(blank=True, null=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('source_host', models.TextField(blank=True, null=True)),
                ('publisher', models.TextField(blank=True, null=True)),
                ('pronouns', models.IntegerField(blank=True, null=True)),
                ('other_metadata', models.TextField(blank=True, null=True)),
                ('original_language', models.TextField(blank=True, null=True)),
                ('mf_harmvirtue', models.FloatField(blank=True, null=True)),
                ('mf_purityvirtue', models.FloatField(blank=True, null=True)),
                ('mf_purityvice', models.FloatField(blank=True, null=True)),
                ('mf_moralitygeneral', models.FloatField(blank=True, null=True)),
                ('mf_ingroupvirtue', models.FloatField(blank=True, null=True)),
                ('mf_ingroupvice', models.FloatField(blank=True, null=True)),
                ('mf_harmvice', models.FloatField(blank=True, null=True)),
                ('mf_fairnessvice', models.FloatField(blank=True, null=True)),
                ('mf_fairnessvirtue', models.FloatField(blank=True, null=True)),
                ('mf_authorityvirtue', models.FloatField(blank=True, null=True)),
                ('mf_authorityvice', models.FloatField(blank=True, null=True)),
                ('dal_activation', models.FloatField(blank=True, null=True)),
                ('dal_pleasantness', models.FloatField(blank=True, null=True)),
                ('dal_imagery', models.FloatField(blank=True, null=True)),
                ('lexicoder_pos', models.FloatField(blank=True, null=True)),
                ('lexicoder_neg', models.FloatField(blank=True, null=True)),
                ('inquirer_pos', models.FloatField(blank=True, null=True)),
                ('inquirer_neg', models.FloatField(blank=True, null=True)),
                ('bing_liu_neg', models.FloatField(blank=True, null=True)),
                ('bing_liu_pos', models.FloatField(blank=True, null=True)),
                ('anew_valence', models.FloatField(blank=True, null=True)),
                ('anew_arousal', models.FloatField(blank=True, null=True)),
                ('anew_dominance', models.FloatField(blank=True, null=True)),
                ('offset', models.FloatField(blank=True, null=True)),
                ('geolocation_probabilities', models.TextField(blank=True, null=True)),
                ('geolocation', models.TextField(blank=True, null=True)),
                ('geolocation_featureids', models.TextField(blank=True, null=True)),
                ('geolocation_original', models.TextField(blank=True, null=True)),
                ('extracted_organizations', models.TextField(blank=True, null=True)),
                ('geolocation_locations', models.TextField(blank=True, null=True)),
                ('extracted_people', models.TextField(blank=True, null=True)),
                ('extracted_locations', models.TextField(blank=True, null=True)),
                ('country', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('male', models.IntegerField(blank=True, default=0, null=True)),
                ('female', models.IntegerField(blank=True, default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='YahooStockData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date')),
                ('open', models.FloatField(blank=True, null=True, verbose_name='Open')),
                ('high', models.FloatField(blank=True, null=True, verbose_name='High')),
                ('low', models.FloatField(blank=True, null=True, verbose_name='Low')),
                ('close', models.FloatField(blank=True, null=True, verbose_name='Close')),
                ('adj_close', models.FloatField(blank=True, null=True, verbose_name='Adj Close')),
            ],
        ),
        migrations.CreateModel(
            name='ShortInterest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_volume', models.IntegerField(blank=True, null=True)),
                ('total_volume', models.IntegerField(blank=True, null=True)),
                ('short_volume_ratio', models.FloatField(blank=True, null=True)),
                ('date', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='shortinterests', to='ibhi.yahoostockdata')),
            ],
        ),
    ]
