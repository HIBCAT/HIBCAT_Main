# Generated by Django 3.1.5 on 2021-07-25 18:04

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='APIDataDictionary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_name', models.TextField(blank=True, null=True, verbose_name='Api Name')),
                ('field_name', models.TextField(blank=True, null=True, verbose_name='Field Name')),
                ('field_data_type', models.TextField(blank=True, null=True, verbose_name="Field's Data Type")),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='BwActivityDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dayOfWeek', models.IntegerField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('day_vol', models.BigIntegerField(blank=True, null=True, verbose_name='Volume by Day')),
            ],
        ),
        migrations.CreateModel(
            name='BwActivityTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hourOfDay', models.TimeField(blank=True, null=True, verbose_name='Time')),
                ('brand', models.TextField(blank=True, null=True)),
                ('time_vol', models.BigIntegerField(blank=True, null=True, verbose_name='Volume by Time')),
            ],
        ),
        migrations.CreateModel(
            name='BwContentSources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('blogs', models.IntegerField(blank=True, default=0, null=True, verbose_name='Blogs')),
                ('twitter', models.IntegerField(blank=True, default=0, null=True, verbose_name='Twitter')),
                ('reddit', models.IntegerField(blank=True, default=0, null=True, verbose_name='Reddit')),
            ],
        ),
        migrations.CreateModel(
            name='BwEmotions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('anger', models.IntegerField(blank=True, default=0, null=True, verbose_name='Anger')),
                ('fear', models.IntegerField(blank=True, default=0, null=True, verbose_name='Fear')),
                ('disgust', models.IntegerField(blank=True, default=0, null=True, verbose_name='Disgust')),
                ('joy', models.IntegerField(blank=True, default=0, null=True, verbose_name='Fear')),
                ('surprise', models.IntegerField(blank=True, default=0, null=True, verbose_name='Surprise')),
                ('sadness', models.IntegerField(blank=True, default=0, null=True, verbose_name='Sadness')),
            ],
        ),
        migrations.CreateModel(
            name='BwGeography',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.TextField(blank=True, null=True)),
                ('countries', models.TextField(blank=True, null=True)),
                ('geo_vol', models.IntegerField(blank=True, null=True, verbose_name='Geographic Volume')),
            ],
        ),
        migrations.CreateModel(
            name='BwNetSentiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('net_sent_vol', models.FloatField(blank=True, null=True, verbose_name='Net Sentiment Volume')),
            ],
        ),
        migrations.CreateModel(
            name='BwSentiments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('positive', models.IntegerField(blank=True, default=0, null=True)),
                ('neutral', models.IntegerField(blank=True, default=0, null=True)),
                ('negative', models.IntegerField(blank=True, default=0, null=True)),
                ('net_sentiment', models.FloatField(blank=True, null=True, verbose_name='Net Sentiment')),
                ('volume', models.IntegerField(blank=True, null=True, verbose_name='Volume (Pos+Neg)')),
            ],
        ),
        migrations.CreateModel(
            name='BwVolume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('volume', models.IntegerField(blank=True, null=True, verbose_name='Activity Volume')),
            ],
        ),
        migrations.CreateModel(
            name='CCEventTimeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.TextField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True, verbose_name="Event's Start Date")),
                ('end_date', models.DateField(blank=True, null=True, verbose_name="Event's End Date")),
                ('event_type', models.CharField(choices=[('Positive Shock - Planned Activity', 'Positive Shock - Planned Activity'), ('Positive Shock - Unplanned Activity', 'Positive Shock - Unplanned Activity'), ('Negative Shock - Planned Activity', 'Negative Shock - Planned Activity'), ('Negative Shock - Unplanned Activity', 'Negative Shock - Unplanned Activity')], default='Positive Shock - Planned Activity', max_length=50, verbose_name='Event Type')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Event Description')),
            ],
        ),
        migrations.CreateModel(
            name='ClineCenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publication_date', models.TextField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('publication_date_only', models.DateField(blank=True, null=True)),
                ('publication_time', models.TimeField(blank=True, null=True)),
                ('article_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='_id')),
                ('aid', models.TextField(blank=True, null=True)),
                ('source_name', models.TextField(blank=True, null=True)),
                ('source_location', models.TextField(blank=True, null=True)),
                ('url', models.TextField(blank=True, null=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('source_host', models.TextField(blank=True, null=True)),
                ('publisher', models.TextField(blank=True, null=True)),
                ('pronouns', models.IntegerField(blank=True, null=True)),
                ('other_metadata', models.TextField(blank=True, null=True)),
                ('original_language', models.TextField(blank=True, null=True)),
                ('mf_harmvirtue', models.FloatField(blank=True, null=True)),
                ('mf_purityvirtue', models.FloatField(blank=True, null=True)),
                ('mf_purityvice', models.FloatField(blank=True, null=True)),
                ('mf_moralitygeneral', models.FloatField(blank=True, null=True)),
                ('mf_ingroupvirtue', models.FloatField(blank=True, null=True)),
                ('mf_ingroupvice', models.FloatField(blank=True, null=True)),
                ('mf_harmvice', models.FloatField(blank=True, null=True)),
                ('mf_fairnessvice', models.FloatField(blank=True, null=True)),
                ('mf_fairnessvirtue', models.FloatField(blank=True, null=True)),
                ('mf_authorityvirtue', models.FloatField(blank=True, null=True)),
                ('mf_authorityvice', models.FloatField(blank=True, null=True)),
                ('dal_activation', models.FloatField(blank=True, null=True)),
                ('dal_pleasantness', models.FloatField(blank=True, null=True)),
                ('dal_imagery', models.FloatField(blank=True, null=True)),
                ('lexicoder_pos', models.FloatField(blank=True, null=True)),
                ('lexicoder_neg', models.FloatField(blank=True, null=True)),
                ('inquirer_pos', models.FloatField(blank=True, null=True)),
                ('inquirer_neg', models.FloatField(blank=True, null=True)),
                ('bing_liu_neg', models.FloatField(blank=True, null=True)),
                ('bing_liu_pos', models.FloatField(blank=True, null=True)),
                ('bing_liu_net_sentiment', models.FloatField(blank=True, null=True, verbose_name='Bing Liu Net Sentiment')),
                ('anew_valence', models.FloatField(blank=True, null=True)),
                ('anew_arousal', models.FloatField(blank=True, null=True)),
                ('anew_dominance', models.FloatField(blank=True, null=True)),
                ('offset', models.FloatField(blank=True, null=True)),
                ('geolocation_probabilities', models.TextField(blank=True, null=True)),
                ('geolocation', models.TextField(blank=True, null=True)),
                ('geolocation_featureids', models.TextField(blank=True, null=True)),
                ('geolocation_original', models.TextField(blank=True, null=True)),
                ('extracted_organizations', models.TextField(blank=True, null=True)),
                ('geolocation_locations', models.TextField(blank=True, null=True)),
                ('extracted_people', models.TextField(blank=True, null=True)),
                ('extracted_locations', models.TextField(blank=True, null=True)),
                ('country', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.DateField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('male', models.IntegerField(blank=True, default=0, null=True)),
                ('female', models.IntegerField(blank=True, default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Ideas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date of Suggestion')),
                ('suggested_by', models.TextField(blank=True, null=True, verbose_name='Suggested By')),
                ('title', models.TextField(blank=True, null=True, verbose_name='Title')),
                ('entry_type', models.CharField(choices=[('New Feature Idea', 'New Feature Idea'), ('Programming Related', 'Programming Related'), ('Improvement Suggestions', 'Improvement Suggestions'), ('Other', 'Other')], default='New Feature Idea', max_length=50, verbose_name='Entry Type')),
            ],
        ),
        migrations.CreateModel(
            name='InternalLinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True, verbose_name='Link Name')),
                ('link', models.TextField(blank=True, null=True, verbose_name='Link')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Link Description')),
            ],
        ),
        migrations.CreateModel(
            name='RawDataDictionary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('database_name', models.TextField(blank=True, null=True, verbose_name='Database Name')),
                ('field_name', models.TextField(blank=True, null=True, verbose_name='Field Name')),
                ('field_data_type', models.TextField(blank=True, null=True, verbose_name="Field's Data Type")),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='ResearchPapers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date of Addition')),
                ('added_by_person', models.TextField(blank=True, null=True, verbose_name='Suggested By')),
                ('entry_type', models.CharField(choices=[('Research Paper', 'Research Paper'), ('Video', 'Video'), ('Web Article', 'Web Article'), ('Visualization', 'Visualization'), ('Programming Related', 'Programming Related'), ('Other', 'Other')], default='Research Paper', max_length=50, verbose_name='Entry Type')),
                ('title', models.TextField(blank=True, null=True, verbose_name='Title')),
                ('link', models.TextField(blank=True, null=True, verbose_name='Link')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='YahooStockData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date')),
                ('brand', models.TextField(blank=True, null=True)),
                ('open', models.FloatField(blank=True, null=True, verbose_name='Open')),
                ('high', models.FloatField(blank=True, null=True, verbose_name='High')),
                ('low', models.FloatField(blank=True, null=True, verbose_name='Low')),
                ('close', models.FloatField(blank=True, null=True, verbose_name='Close')),
                ('adj_close', models.FloatField(blank=True, null=True, verbose_name='Adj Close')),
            ],
        ),
        migrations.CreateModel(
            name='ShortInterest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.TextField(blank=True, null=True)),
                ('short_volume', models.IntegerField(blank=True, null=True)),
                ('total_volume', models.IntegerField(blank=True, null=True)),
                ('short_volume_ratio', models.FloatField(blank=True, null=True)),
                ('date', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='shortinterests', to='ibhi.yahoostockdata')),
            ],
        ),
    ]
